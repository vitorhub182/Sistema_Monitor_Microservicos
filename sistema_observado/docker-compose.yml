version: "3.5"
services:
 collector:
    container_name: collector 
    image: otel/opentelemetry-collector-contrib:0.116.1
    volumes:
      - ./collector_config/collector-config.yaml:/collector-config.yaml
    command: ["--config=/collector-config.yaml"]
    expose:
      - "4318"
      - "4317"
    ports:
      - "4318:4318"
      - "4317:4317"
    networks:
     network_micro:
      ipv4_address: 192.168.2.11
 elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_LOCAL_VERSION}
    container_name: ${ES_LOCAL_CONTAINER_NAME}
    volumes:
      - dev-elasticsearch:/usr/share/elasticsearch/data
      - ./es_backups:/usr/share/elasticsearch/backup
    ports:
      - 127.0.0.1:${ES_LOCAL_PORT}:9200
    networks:
     network_micro:
      ipv4_address: 192.168.2.18
    environment:
      - path.repo=/usr/share/elasticsearch/backup
      - action.destructive_requires_name=false # TemporÃ¡rio
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ES_LOCAL_PASSWORD}
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.license.self_generated.type=trial
      - xpack.ml.use_auto_machine_memory_percent=true
      - ES_JAVA_OPTS=-Xms${ES_LOCAL_HEAP_INIT} -Xmx${ES_LOCAL_HEAP_MAX}
      - cluster.routing.allocation.disk.watermark.low=${ES_LOCAL_DISK_SPACE_REQUIRED}
      - cluster.routing.allocation.disk.watermark.high=${ES_LOCAL_DISK_SPACE_REQUIRED}
      - cluster.routing.allocation.disk.watermark.flood_stage=${ES_LOCAL_DISK_SPACE_REQUIRED}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --output /dev/null --silent --head --fail -u elastic:${ES_LOCAL_PASSWORD} http://elasticsearch:${ES_LOCAL_PORT}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

 frontend-sistema:
  container_name: frontend-sistema
  environment:
   NEXT_PUBLIC_HOST_BACKEND: http://localhost
   NEXT_PUBLIC_PORTA_ALUNO: 8087
   NEXT_PUBLIC_PORTA_CURSO: 8088
   NEXT_PUBLIC_PORTA_RELATORIO: 8089
  build:
   context: ./frontend-sistema
   dockerfile: Dockerfile
  stdin_open: true
  tty: true
  ports:
   - "3012:3000"
  networks:
   network_micro:
    ipv4_address: 192.168.2.19

 kong:
   image: kong:3.8
   container_name: kong
   ports:
     - "8090:8000"
     - "8091:8001"
   volumes:
     - ./gateway-kong/kong.yaml:/etc/kong/kong.yaml
     - ./gateway-kong/kong.conf:/etc/kong/kong.conf
   networks:
     network_micro:
       ipv4_address: 192.168.2.30
   restart: unless-stopped


 jeager_test:
    profiles: ["no-start"]
    container_name: jeager_test
    image: jaegertracing/all-in-one:1.41
    environment: 
      COLLECTOR_OTLP_ENABLED: true
    expose:
      - "4318"
      - "4317"
      - "16686"
    ports:
      - "14318:4318"
      - "14317:4317"
      - "16686:16686"
    networks:
     network_micro:
      ipv4_address: 192.168.2.12
 zipkin_test:
    profiles: ["no-start"]
    image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}
    container_name: zipkin_test
    environment:
      - STORAGE_TYPE=mem
    networks:
      network_micro:
        ipv4_address: 192.168.2.19
    ports:
      - 9411:9411
 prometheus_test:
    profiles: ["no-start"]
    image: prom/prometheus
    container_name: prometheus_test
    volumes:
      - "./prometheus_config/prometheus.yml:/etc/prometheus/prometheus.yml"
    command:
       - '--config.file=/etc/prometheus/prometheus.yml'
       - '--web.enable-remote-write-receiver'
    networks:
      network_micro:
        ipv4_address: 192.168.2.20
    ports:
      - 9090:9090
 kibana_settings:
   profiles: ["no-start"]
   depends_on:
     elasticsearch:
       condition: service_healthy
   image: docker.elastic.co/elasticsearch/elasticsearch:${ES_LOCAL_VERSION}
   container_name: kibana_settings
   restart: 'no'
   command: >
     bash -c '
       echo "Setup the kibana_system password";
       start_time=$(date +%s);
       timeout=60;
       until curl -s -u "elastic:${ES_LOCAL_PASSWORD}" -X POST http://elasticsearch:${ES_LOCAL_PORT}/_security/user/kibana_system/_password -d "{\"password\":\"'${KIBANA_LOCAL_PASSWORD}'\"}" -H "Content-Type: application/json" | grep -q "^{}"; do if [ $(($(date +%s) - $$start_time)) -ge $$timeout ]; then echo "Error: Elasticsearch timeout"; exit 1; fi; sleep 2; done;
     '
 kibana:
   profiles: ["no-start"]
   depends_on:
     kibana_settings:
       condition: service_completed_successfully
   image: docker.elastic.co/kibana/kibana:${ES_LOCAL_VERSION}
   container_name: ${KIBANA_LOCAL_CONTAINER_NAME}
   volumes:
     - dev-kibana:/usr/share/kibana/data
   ports:
     - 127.0.0.1:${KIBANA_LOCAL_PORT}:5601
   environment:
     - SERVER_NAME=kibana
     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
     - ELASTICSEARCH_USERNAME=kibana_system
     - ELASTICSEARCH_PASSWORD=${KIBANA_LOCAL_PASSWORD}
     - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY}
     - ELASTICSEARCH_PUBLICBASEURL=http://localhost:${ES_LOCAL_PORT}
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s -I http://kibana:5601 | grep -q 'HTTP/1.1 302 Found'",
       ]
     interval: 10s
     timeout: 10s
     retries: 20
    
 mysql-service-aluno:
  container_name: mysql-service-aluno
  image: mysql:8.0
  restart: always
  networks:
   network_micro:
    ipv4_address: 192.168.2.15
  environment:
   MYSQL_ROOT_PASSWORD: cefetmg
   MYSQL_DATABASE: db_aluno     
   MYSQL_USER: joaovitor
   MYSQL_PASSWORD: jvsd
  ports:
   - "3307:3306"
  healthcheck:
    test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pcefetmg"]
    interval: 10s
    timeout: 5s
    retries: 3
 mysql-service-curso:
  #profiles: ["no-start"]
  container_name: mysql-service-curso
  image: mysql:8.0
  restart: always
  networks:
   network_micro:
    ipv4_address: 192.168.2.13
  environment:
   MYSQL_ROOT_PASSWORD: cefetmg
   MYSQL_DATABASE: db_curso     
   MYSQL_USER: joaovitor
   MYSQL_PASSWORD: jvsd
  ports:
   - "3308:3306"
  healthcheck:
    test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pcefetmg"]
    interval: 10s
    timeout: 5s
    retries: 3

 web-service-aluno:
  container_name: web-service-aluno
  build:
   context: ./alunocrud
   dockerfile: Dockerfile
  environment:
      OTEL_SERVICE_NAME: "web-service-aluno"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT}
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${OTEL_EXPORTER_OTLP_METRICS_ENDPOINT}
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${OTEL_EXPORTER_OTLP_LOGS_ENDPOINT}
      OTEL_TRACES_SAMPLER: always_on
  ports:
   - "8087:8080"
  #volumes:
  # - ./agent_config/sdk-config.yaml:/sdk-config.yaml
  networks:
   network_micro:
    ipv4_address: 192.168.2.16
  depends_on:
    mysql-service-aluno:
      condition: service_healthy

 web-service-curso:
  #profiles: ["no-start"]
  container_name: web-service-curso
  build:
   context: ./cursocrud
   dockerfile: Dockerfile
  environment:
      OTEL_SERVICE_NAME: "web-service-curso"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT}
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${OTEL_EXPORTER_OTLP_LOGS_ENDPOINT}
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${OTEL_EXPORTER_OTLP_METRICS_ENDPOINT}
      #OTEL_BLRP_SCHEDULE_DELAY: 500
      OTEL_TRACES_SAMPLER: always_on
  ports:
   - "8088:8080"
  networks:
   network_micro:
    ipv4_address: 192.168.2.14
  depends_on:
   mysql-service-curso:
    condition: service_healthy
 web-service-relatorio:
  #profiles: ["no-start"]
  container_name: web-service-relatorio
  build:
   context: ./relatorios
   dockerfile: Dockerfile
  environment:
      OTEL_SERVICE_NAME: "web-service-relatorio"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT}
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${OTEL_EXPORTER_OTLP_METRICS_ENDPOINT}
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${OTEL_EXPORTER_OTLP_LOGS_ENDPOINT}
      #OTEL_BLRP_SCHEDULE_DELAY: 500
      OTEL_TRACES_SAMPLER: always_on
      
  ports:    
   - "8089:8080"
  networks:
   network_micro:
    ipv4_address: 192.168.2.17
    
networks:
 network_micro:
  external: true
  name: network_micro
  driver: bridge
  ipam:
   driver: default
   config:
    - subnet: ${SUBNETWORK}

volumes:
  dev-elasticsearch:
  es_backups:
   driver: local
  dev-kibana:
   driver: local
